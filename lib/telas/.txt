import 'package:flutter/material.dart';
import '../database/database_helper.dart';

class CriarCaronaScreen extends StatefulWidget {
  final String userEmail;

  const CriarCaronaScreen({super.key, required this.userEmail});

  @override
  _CriarCaronaScreenState createState() => _CriarCaronaScreenState();
}

class _CriarCaronaScreenState extends State<CriarCaronaScreen> {
  final _formKey = GlobalKey<FormState>();
  final _destinoController = TextEditingController();
  final _horarioController = TextEditingController();
  final _vagasController = TextEditingController();

  Future<void> _criarCarona() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      final user =
          await DatabaseHelper.instance.getUserByEmail(widget.userEmail);
      if (user == null) {
        throw Exception('Usuário não encontrado.');
      }

      final carona = {
        'motorista_id': user['id'],
        'destino': _destinoController.text.trim(),
        'horario': _horarioController.text.trim(),
        'vagas': int.parse(_vagasController.text.trim()),
      };

      await DatabaseHelper.instance.createCarona(carona);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Carona criada com sucesso!')),
      );

      Navigator.pop(context, true); // Enviar sucesso para atualizar a lista
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erro ao criar carona: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Criar Carona')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _destinoController,
                decoration: const InputDecoration(labelText: 'Destino'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Informe o destino';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _horarioController,
                decoration: const InputDecoration(labelText: 'Horário'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Informe o horário';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _vagasController,
                decoration: const InputDecoration(labelText: 'Vagas'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty || int.tryParse(value) == null) {
                    return 'Informe o número de vagas (valor numérico)';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _criarCarona,
                child: const Text('Criar Carona'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
